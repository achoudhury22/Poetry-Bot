#-------------------------------------------------------
#        Name: Anaan Choudhury & Tulip Daaboul
#       Peers: N/A
#  References: Header Photo by Etienne Girardet on Unsplash, Icon Photo by Art Lasovsky on Unsplash
https://www.sitepoint.com/how-to-create-a-twitter-app-and-api-interface-via-python/

https://lithub.com/encountering-literary-bots-in-the-wilds-of-twitter/

#------------------------------------------------------

## Final Project- SapphoOnline: A Twitter Literary Bot

This bot is designed to create and post short, angsty poems onto Twitter.com. The poems will be generated by selecting random indexes from our stanzas stored as CSVs. In addition, replit will store all the posted poems in a file, TwitterPoems.txt.

### Files and Downloads
 
#### Tweepy Module

The user will need to download the "Tweepy" module in order to connect the python repository to the Twitter application. When you import the Tweepy Module, two packager files will download as well: poetry.lock and pyproject.toml. You do not need to do anything to these files as these will work to connect twitter and python themselves. To download Tweepy, type in one of the three options below:

```{python}
pip install tweepy
```
or
```{python}
pip install git+https://github.com/tweepy/tweepy.git
```
or 
```{python}
import tweepy
```

If either code fails to execute, this means that the user does not have pip the Python package manager and can install it through [this link](https://pip.pypa.io/en/stable/installing/).

The Tweepy module is what is going to allow our bot to post the poems onto the web.

#### Time Module

The 'time' module will be used to keep the code running, take a break, then run again depending on the time you set in seconds. For more information about the 'time' module click [here](https://replit.com/talk/learn/Time-and-DateTime-in-Python/21047).
Importing the module can be done as shown below:

```{python}
import time
```

#### Importing random

The purpose of this program is to test its ability to generate random poetry through the use of our stanzas. In order to accomplish this, we need to import this module. It can be done as shown below:

```{python}
import random
```

#### Importing CSV

The CSV module will allow us to store certain files as CSVs, read them into python and then use them to create randomly generated poems. In addition, we have 5 CSV files where in one line of code we have 7 different possible lines to use in our poems.

#### TwitterPoems.txt file

This is an empty file where you can append your randomly generated poems into.

#### Icon / Header Jpeg Files

The files included are samples of images that can be used for the setup of the Twitter account in the future. 


### How the Program Runs

#### Step 1: 
It should be noted that this program has little to no user-interaction; Replit will conduct most of the work for you. All the user has to do is hit "Run" on the top of the screen everytime you either open Replit, or want to reset the timer and program.

After importing your needed files, the first step would be connecting to Twitter with Tweepy. The Python program is then set up as a "Twitter app" through [developer.twitter.com](developer.twitter.com). A Twitter account will need to be created for this to happen of course and to post the poems from. When creating an account, be sure to use a valid phone number in order for your account to be verified. 
 
[This](https://apps.twitter.com) is the link to head to once an account is created. After clicking the "Create New App" button, registering the bot with details is simple. After it is registered, the “Keys and Access Tokens” tab holds the account's Consumer Key (API Key) and Consumer Secret (API Secret) (note these down somewhere). Under token actions click "Create Access Token". Note your Access Token and your Access Token Secret somewhere as well. Create variable names similar to "ACCESS_KEY" etc. and set them equal to your account's unique Access Token, Access Token Secret, Consumer Key, and Consumer Secret.

Replit will now check if your credentials noted above are correct. If they are working, the phrase "Authorization okay" will print onto the console, and if not, you will get "Error during authorizationn check your credentials again". If this occurs, edit your credentials and hit "Run" again.

#### Step 2: 


The program has five CSVs that contain possible lines for each respective stanza. We start by importing these CSVs and reading them in. This is all done in the functions 'read_files()' and 'read_stanzas()'. Then the random module is used in the 'get_random_stanza()' function where the program will generate a random number which represents indexes. Python will then return the randomly selected index from each stanza. Finally the function 'def poem_maker()' will weave the selected phrases (indexes) together to form a poem and return it. 


#### Step 3: 

Now, we need to use the time module. We will first incorporate a loop. The if condition is always met in our case, because we previously made sure all our phrases are the correct length. 280 is the maximun because that is the character limit allowed on Twitter. Our poem is then posted onto Twitter and printed on the console. Python then proceeds to open a file (TwitterPoems.txt) and append the new poem. 
This file holds all poems ever generated by the code in this repository and will update each time the code generates a new poem by being run or cycling through the loop of generating a poem, sleeping, then generating a poem again. Finally, our last line in the loop tells python when to generate new poems, which in our case is eevery 1800 sec (30 min). It should also be noted that everytime the program runs, "poem_maker()" will hold a new random generated poem.

Replit cannot run a program 24/7 after clicking the "Run" button once, so eventually our program will crash. When this happens and you would like the program to continue running and posting poems, click "Run" again on the top of the screen. 

#### Final Product:
An example of what the final code can look like is available at [https://twitter.com/sapphicpoemcsc](https://twitter.com/sapphicpoemcsc). This is the link to the account our code posts to.